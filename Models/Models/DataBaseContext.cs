// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Models.Models;

public partial class DataBaseContext : DbContext
{
    public DataBaseContext(DbContextOptions<DataBaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AgeCategory> AgeCategories { get; set; }

    public virtual DbSet<Allergen> Allergens { get; set; }

    public virtual DbSet<AllergenMaterial> AllergenMaterials { get; set; }

    public virtual DbSet<AllergenMaterialView> AllergenMaterialViews { get; set; }

    public virtual DbSet<BaseMaterial> BaseMaterials { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<DayMenu> DayMenus { get; set; }

    public virtual DbSet<DayOrder> DayOrders { get; set; }

    public virtual DbSet<Ecode> Ecodes { get; set; }

    public virtual DbSet<Ingredient> Ingredients { get; set; }

    public virtual DbSet<IngredientDataView> IngredientDataViews { get; set; }

    public virtual DbSet<MaterialGroup> MaterialGroups { get; set; }

    public virtual DbSet<Meal> Meals { get; set; }

    public virtual DbSet<MealRecipe> MealRecipes { get; set; }

    public virtual DbSet<Recipe> Recipes { get; set; }

    public virtual DbSet<RecipeCategory> RecipeCategories { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Stock> Stocks { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    public virtual DbSet<UserRoleView> UserRoleViews { get; set; }

    public virtual DbSet<Vitamin> Vitamins { get; set; }

    public virtual DbSet<WeekMenu> WeekMenus { get; set; }

    public virtual DbSet<WeekOrder> WeekOrders { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AgeCategory>(entity =>
        {
            entity.ToTable("AgeCategory");

            entity.Property(e => e.AgeCategoryName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Allergen>(entity =>
        {
            entity.ToTable("Allergen");

            entity.Property(e => e.AllergenCode)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AllergenDescription)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.AllergenName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<AllergenMaterial>(entity =>
        {
            entity.ToTable("AllergenMaterial");

            entity.Property(e => e.AllergenMaterialId).HasColumnName("AllergenMaterialID");
            entity.Property(e => e.AllergenId).HasColumnName("AllergenID");
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");
        });

        modelBuilder.Entity<AllergenMaterialView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AllergenMaterialView");

            entity.Property(e => e.AllergenCode)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AllergenDescription)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.AllergenMaterialId).HasColumnName("AllergenMaterialID");
            entity.Property(e => e.AllergenName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");
        });

        modelBuilder.Entity<BaseMaterial>(entity =>
        {
            entity.HasKey(e => e.MaterialId);

            entity.ToTable("BaseMaterial");

            entity.Property(e => e.ActivityDescription)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Carbohydrate).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Cholesterol).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Fat).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Fiber).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ItjSztj)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ITJ_SZTJ");
            entity.Property(e => e.Kalcium).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Kalium).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Kilojule).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.MaterialCode)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MaterialName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Measure)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Note).HasColumnType("text");
            entity.Property(e => e.Protein).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.RetailPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Salt).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SaturatedFat).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Sugar).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SupplierCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TransFat).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Vatrate).HasColumnName("VATRate");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.ToTable("Customer");

            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<DayMenu>(entity =>
        {
            entity.ToTable("DayMenu");

            entity.Property(e => e.DayMenuDate).HasColumnType("date");
            entity.Property(e => e.DayMenuName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<DayOrder>(entity =>
        {
            entity.ToTable("DayOrder");
        });

        modelBuilder.Entity<Ecode>(entity =>
        {
            entity.Property(e => e.EcodeId).HasColumnName("EcodeID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Ecode1)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Ecode");
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");
        });

        modelBuilder.Entity<Ingredient>(entity =>
        {
            entity.ToTable("Ingredient");

            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<IngredientDataView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IngredientDataView");

            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.MaterialCode)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MaterialName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Note).HasColumnType("text");
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<MaterialGroup>(entity =>
        {
            entity.HasKey(e => e.GroupCode);

            entity.ToTable("MaterialGroup");

            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Meal>(entity =>
        {
            entity.ToTable("Meal");

            entity.Property(e => e.MealDescription)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.MealName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<MealRecipe>(entity =>
        {
            entity.ToTable("MealRecipe");
        });

        modelBuilder.Entity<Recipe>(entity =>
        {
            entity.ToTable("Recipe");

            entity.Property(e => e.RecipeCalories).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeCarbohydrate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeCholesterol).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeCostPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeDescription).HasColumnType("text");
            entity.Property(e => e.RecipeFat).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeFiber).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeKalcium).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeKalium).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeKilojule).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeMeasure).HasMaxLength(50);
            entity.Property(e => e.RecipeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RecipeProtein).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeQuantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeRetailPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeSalt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeSaturatedFat).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeSugar).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeTransFat).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RecipeCategory>(entity =>
        {
            entity.ToTable("RecipeCategory");

            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(1000);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable("Role");

            entity.Property(e => e.RoleDescription)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Stock>(entity =>
        {
            entity.ToTable("Stock");

            entity.Property(e => e.StockId).HasColumnName("StockID");
            entity.Property(e => e.CountingUnitPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CurrentStock).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");
            entity.Property(e => e.MaximumOrderPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.OrderUnitPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.PreCalculationPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SalePrice).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasColumnType("image");
            entity.Property(e => e.PasswordSalt)
                .IsRequired()
                .HasColumnType("image");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.ToTable("UserRole");
        });

        modelBuilder.Entity<UserRoleView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UserRoleView");

            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Vitamin>(entity =>
        {
            entity.Property(e => e.VitaminId).HasColumnName("VitaminID");
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");
            entity.Property(e => e.Pha).HasColumnName("PHA");
        });

        modelBuilder.Entity<WeekMenu>(entity =>
        {
            entity.ToTable("WeekMenu");

            entity.Property(e => e.WeekMenuEndDate).HasColumnType("date");
            entity.Property(e => e.WeekMenuName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.WeekMenuStartDate).HasColumnType("date");
        });

        modelBuilder.Entity<WeekOrder>(entity =>
        {
            entity.ToTable("WeekOrder");

            entity.Property(e => e.EndDate).HasColumnType("date");
            entity.Property(e => e.StartDate).HasColumnType("date");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}