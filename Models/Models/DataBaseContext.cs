// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Models.Models;

public partial class DataBaseContext : DbContext
{
    public DataBaseContext(DbContextOptions<DataBaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Allergen> Allergens { get; set; }

    public virtual DbSet<AllergenMaterial> AllergenMaterials { get; set; }

    public virtual DbSet<BaseMaterial> BaseMaterials { get; set; }

    public virtual DbSet<Ecode> Ecodes { get; set; }

    public virtual DbSet<MaterialGroup> MaterialGroups { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Stock> Stocks { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    public virtual DbSet<UserRoleView> UserRoleViews { get; set; }

    public virtual DbSet<Vitamin> Vitamins { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Allergen>(entity =>
        {
            entity.ToTable("Allergen");

            entity.Property(e => e.AllergenCode)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AllergenDescription)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.AllergenName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<AllergenMaterial>(entity =>
        {
            entity.ToTable("AllergenMaterial");

            entity.Property(e => e.AllergenMaterialId).HasColumnName("AllergenMaterialID");
            entity.Property(e => e.AllergenId).HasColumnName("AllergenID");
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");

            entity.HasOne(d => d.Allergen).WithMany(p => p.AllergenMaterials)
                .HasForeignKey(d => d.AllergenId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Material).WithMany(p => p.AllergenMaterials)
                .HasForeignKey(d => d.MaterialId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<BaseMaterial>(entity =>
        {
            entity.HasKey(e => e.MaterialId);

            entity.ToTable("BaseMaterial");

            entity.Property(e => e.ActivityDescription)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Carbohydrate).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Cholesterol).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Fat).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Fiber).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ItjSztj)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ITJ_SZTJ");
            entity.Property(e => e.Kalcium).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Kalium).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Kilojule).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.MaterialCode)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MaterialName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Measure)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Note).HasColumnType("text");
            entity.Property(e => e.Protein).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.RetailPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Salt).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SaturatedFat).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Sugar).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SupplierCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TransFat).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Vatrate).HasColumnName("VATRate");

            entity.HasOne(d => d.MaterialGroup).WithMany(p => p.BaseMaterials).HasForeignKey(d => d.MaterialGroupId);
        });

        modelBuilder.Entity<Ecode>(entity =>
        {
            entity.Property(e => e.EcodeId).HasColumnName("EcodeID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Ecode1)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Ecode");
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");

            entity.HasOne(d => d.Material).WithMany(p => p.Ecodes)
                .HasForeignKey(d => d.MaterialId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<MaterialGroup>(entity =>
        {
            entity.HasKey(e => e.GroupCode);

            entity.ToTable("MaterialGroup");

            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable("Role");

            entity.Property(e => e.RoleDescription)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Stock>(entity =>
        {
            entity.ToTable("Stock");

            entity.Property(e => e.StockId).HasColumnName("StockID");
            entity.Property(e => e.CountingUnitPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CurrentStock).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");
            entity.Property(e => e.MaximumOrderPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.OrderUnitPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.PreCalculationPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SalePrice).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Material).WithMany(p => p.Stocks)
                .HasForeignKey(d => d.MaterialId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasColumnType("image");
            entity.Property(e => e.PasswordSalt)
                .IsRequired()
                .HasColumnType("image");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.ToTable("UserRole");

            entity.HasOne(d => d.Role).WithMany(p => p.UserRoles)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.User).WithMany(p => p.UserRoles)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<UserRoleView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UserRoleView");

            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Vitamin>(entity =>
        {
            entity.Property(e => e.VitaminId).HasColumnName("VitaminID");
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");
            entity.Property(e => e.Pha).HasColumnName("PHA");

            entity.HasOne(d => d.Material).WithMany(p => p.Vitamins)
                .HasForeignKey(d => d.MaterialId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}