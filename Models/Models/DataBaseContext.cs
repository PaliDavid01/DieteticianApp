// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Models.Models;

public partial class DataBaseContext : DbContext
{
    public DataBaseContext(DbContextOptions<DataBaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AgeCategory> AgeCategories { get; set; }

    public virtual DbSet<Allergen> Allergens { get; set; }

    public virtual DbSet<AllergenMaterial> AllergenMaterials { get; set; }

    public virtual DbSet<AllergenMaterialView> AllergenMaterialViews { get; set; }

    public virtual DbSet<BaseMaterial> BaseMaterials { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<DayMenu> DayMenus { get; set; }

    public virtual DbSet<DayOrder> DayOrders { get; set; }

    public virtual DbSet<Ecode> Ecodes { get; set; }

    public virtual DbSet<Ingredient> Ingredients { get; set; }

    public virtual DbSet<IngredientDataView> IngredientDataViews { get; set; }

    public virtual DbSet<MaterialGroup> MaterialGroups { get; set; }

    public virtual DbSet<Meal> Meals { get; set; }

    public virtual DbSet<MealRecipe> MealRecipes { get; set; }

    public virtual DbSet<Recipe> Recipes { get; set; }

    public virtual DbSet<RecipeCategory> RecipeCategories { get; set; }

    public virtual DbSet<RecipeGenerateDataView> RecipeGenerateDataViews { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Stock> Stocks { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    public virtual DbSet<UserRoleView> UserRoleViews { get; set; }

    public virtual DbSet<Vitamin> Vitamins { get; set; }

    public virtual DbSet<WeekMenu> WeekMenus { get; set; }

    public virtual DbSet<WeekMenuGenerateDataAllergen> WeekMenuGenerateDataAllergens { get; set; }

    public virtual DbSet<WeekMenuGenerateDatum> WeekMenuGenerateData { get; set; }

    public virtual DbSet<WeekOrder> WeekOrders { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("SQL_Latin1_General_CP1_CI_AS");

        modelBuilder.Entity<AgeCategory>(entity =>
        {
            entity.HasKey(e => e.AgeCategoryId).HasName("PK__AgeCateg__9E07484B4B72AC11");

            entity.ToTable("AgeCategory");

            entity.Property(e => e.AgeCategoryName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Allergen>(entity =>
        {
            entity.HasKey(e => e.AllergenId).HasName("PK__Allergen__158B939FA8E08E27");

            entity.ToTable("Allergen");

            entity.Property(e => e.AllergenCode)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AllergenDescription)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.AllergenName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<AllergenMaterial>(entity =>
        {
            entity.HasKey(e => e.AllergenMaterialId).HasName("PK__Allergen__1C9C26BC5F23D6FB");

            entity.ToTable("AllergenMaterial");

            entity.Property(e => e.AllergenMaterialId).HasColumnName("AllergenMaterialID");
            entity.Property(e => e.AllergenId).HasColumnName("AllergenID");
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");
        });

        modelBuilder.Entity<AllergenMaterialView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AllergenMaterialView");

            entity.Property(e => e.AllergenCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.AllergenDescription).HasMaxLength(250);
            entity.Property(e => e.AllergenMaterialId).HasColumnName("AllergenMaterialID");
            entity.Property(e => e.AllergenName).HasMaxLength(50);
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");
        });

        modelBuilder.Entity<BaseMaterial>(entity =>
        {
            entity.HasKey(e => e.MaterialId).HasName("PK__BaseMate__C50610F724E0FF90");

            entity.ToTable("BaseMaterial");

            entity.Property(e => e.ActivityDescription)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Carbohydrate).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Cholesterol).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CostPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Fat).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Fiber).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.ItjSztj)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("ITJ_SZTJ");
            entity.Property(e => e.Kalcium).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Kalium).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Kilojule).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.MaterialCode)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MaterialName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Measure)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Note).HasColumnType("text");
            entity.Property(e => e.Protein).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.RetailPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Salt).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SaturatedFat).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Sugar).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SupplierCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TransFat).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Vatrate).HasColumnName("VATRate");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__A4AE64D89D368333");

            entity.ToTable("Customer");

            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<DayMenu>(entity =>
        {
            entity.HasKey(e => e.DayMenuId).HasName("PK__DayMenu__359EBDA73D901404");

            entity.ToTable("DayMenu");

            entity.Property(e => e.DayMenuDate).HasColumnType("date");
            entity.Property(e => e.DayMenuName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<DayOrder>(entity =>
        {
            entity.HasKey(e => e.DayOrderId).HasName("PK__DayOrder__AB1511213E2C799E");

            entity.ToTable("DayOrder");
        });

        modelBuilder.Entity<Ecode>(entity =>
        {
            entity.HasKey(e => e.EcodeId).HasName("PK__Ecodes__E93FDF54D4F17076");

            entity.Property(e => e.EcodeId).HasColumnName("EcodeID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.Ecode1)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Ecode");
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");
        });

        modelBuilder.Entity<Ingredient>(entity =>
        {
            entity.HasKey(e => e.IngredientId).HasName("PK__Ingredie__BEAEB25AF0B8ED47");

            entity.ToTable("Ingredient");

            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<IngredientDataView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("IngredientDataView");

            entity.Property(e => e.GroupName).HasMaxLength(255);
            entity.Property(e => e.MaterialCode)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.MaterialName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Note).HasColumnType("text");
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<MaterialGroup>(entity =>
        {
            entity.HasKey(e => e.GroupCode).HasName("PK__Material__3B974381BDAA4030");

            entity.ToTable("MaterialGroup");

            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Meal>(entity =>
        {
            entity.HasKey(e => e.MealId).HasName("PK__Meal__ACF6A63D1B0D728C");

            entity.ToTable("Meal");

            entity.Property(e => e.MealDescription).HasMaxLength(250);
            entity.Property(e => e.MealName).HasMaxLength(50);
        });

        modelBuilder.Entity<MealRecipe>(entity =>
        {
            entity.HasKey(e => e.MealRecipeId).HasName("PK__MealReci__3DA805E535B86B12");

            entity.ToTable("MealRecipe");
        });

        modelBuilder.Entity<Recipe>(entity =>
        {
            entity.HasKey(e => e.RecipeId).HasName("PK__Recipe__FDD988B07DF999E7");

            entity.ToTable("Recipe");

            entity.Property(e => e.RecipeCalories).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeCarbohydrate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeCholesterol).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeCostPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeDescription).HasColumnType("text");
            entity.Property(e => e.RecipeFat).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeFiber).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeKalcium).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeKalium).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeKilojule).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeMeasure).HasMaxLength(50);
            entity.Property(e => e.RecipeName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RecipeProtein).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeQuantity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeRetailPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeSalt).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeSaturatedFat).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeSugar).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RecipeTransFat).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<RecipeCategory>(entity =>
        {
            entity.HasKey(e => e.RecipeCategoryId).HasName("PK__RecipeCa__747A031B4B148A2D");

            entity.ToTable("RecipeCategory");

            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(1000);
        });

        modelBuilder.Entity<RecipeGenerateDataView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("RecipeGenerateDataView");

            entity.Property(e => e.AllergenIds).HasMaxLength(4000);
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__8AFACE1AF40A03BD");

            entity.ToTable("Role");

            entity.Property(e => e.RoleDescription)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Stock>(entity =>
        {
            entity.HasKey(e => e.StockId).HasName("PK__Stock__2C83A9E2DF4F8270");

            entity.ToTable("Stock");

            entity.Property(e => e.StockId).HasColumnName("StockID");
            entity.Property(e => e.CountingUnitPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CurrentStock).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");
            entity.Property(e => e.MaximumOrderPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.OrderUnitPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.PreCalculationPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.SalePrice).HasColumnType("decimal(10, 2)");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__User__1788CC4CB39AF704");

            entity.ToTable("User");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasColumnType("image");
            entity.Property(e => e.PasswordSalt)
                .IsRequired()
                .HasColumnType("image");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.HasKey(e => e.UserRoleId).HasName("PK__UserRole__3D978A35107A7106");

            entity.ToTable("UserRole");
        });

        modelBuilder.Entity<UserRoleView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UserRoleView");

            entity.Property(e => e.RoleName).HasMaxLength(50);
        });

        modelBuilder.Entity<Vitamin>(entity =>
        {
            entity.HasKey(e => e.VitaminId).HasName("PK__Vitamins__0B06F80D615E5862");

            entity.Property(e => e.VitaminId).HasColumnName("VitaminID");
            entity.Property(e => e.MaterialId).HasColumnName("MaterialID");
            entity.Property(e => e.Pha).HasColumnName("PHA");
        });

        modelBuilder.Entity<WeekMenu>(entity =>
        {
            entity.HasKey(e => e.WeekMenuId).HasName("PK__WeekMenu__667FFFED737C83B8");

            entity.ToTable("WeekMenu");

            entity.Property(e => e.WeekMenuEndDate).HasColumnType("date");
            entity.Property(e => e.WeekMenuName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.WeekMenuStartDate).HasColumnType("date");
        });

        modelBuilder.Entity<WeekMenuGenerateDataAllergen>(entity =>
        {
            entity.HasKey(e => e.WeekMenuGenerateDataAllergenId).HasName("PK__WeekMenu__20B9005EF9C0BA03");

            entity.ToTable("WeekMenuGenerateDataAllergen");
        });

        modelBuilder.Entity<WeekMenuGenerateDatum>(entity =>
        {
            entity.HasKey(e => e.WeekMenuGenerateDataId).HasName("PK__WeekMenu__39BD0D3DBADDD70D");
        });

        modelBuilder.Entity<WeekOrder>(entity =>
        {
            entity.HasKey(e => e.WeekOrderId).HasName("PK__WeekOrde__F1FE3D7064696A4D");

            entity.ToTable("WeekOrder");

            entity.Property(e => e.EndDate).HasColumnType("date");
            entity.Property(e => e.StartDate).HasColumnType("date");
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}