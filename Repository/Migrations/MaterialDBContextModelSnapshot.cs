// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Database;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(MaterialDBContext))]
    partial class MaterialDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Models.Storage.Material", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<float>("Carbohydrate")
                        .HasColumnType("REAL");

                    b.Property<float>("Cholesterol")
                        .HasColumnType("REAL");

                    b.Property<float>("Fat")
                        .HasColumnType("REAL");

                    b.Property<float>("Fluorite_mg")
                        .HasColumnType("REAL");

                    b.Property<float>("Kilocalorie")
                        .HasColumnType("REAL");

                    b.Property<float>("Kilojoule")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<float>("Natrium_mg")
                        .HasColumnType("REAL");

                    b.Property<float>("Protein")
                        .HasColumnType("REAL");

                    b.Property<float>("Salt")
                        .HasColumnType("REAL");

                    b.Property<float>("Saturatedfat")
                        .HasColumnType("REAL");

                    b.Property<int>("Scale")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Sugar")
                        .HasColumnType("REAL");

                    b.Property<float>("Transfat")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("Models.Storage.StorageItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MaterialId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PackageSize")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("StoredAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("StoredBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("StorageItem");
                });

            modelBuilder.Entity("Models.Storage.StorageItem", b =>
                {
                    b.HasOne("Models.Storage.Material", "Type")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });
#pragma warning restore 612, 618
        }
    }
}
